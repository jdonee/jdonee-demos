<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"
		default-lazy-init="true">
	
	<!-- 自定义的注解检查属性 -->
	<bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/>
	
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.jdonee.insight" >
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>

	<!-- 配置属性文件 -->
	<util:properties id="settings" location="classpath:/application.properties" />  
	
	<!--wro映射  -->
	<bean id="wroFilter" class="ro.isdc.wro.http.ConfigurableWroFilter">
	  <property name="properties" ref="wroProperties"/>
	</bean>
	
	<bean id="wroProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">  
	    <property name="location" value="classpath:wro.properties" />  
	</bean>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<!-- JSR303 Validator定义 -->
 	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- production环境 -->
	<beans profile="production">
		<context:property-placeholder ignore-unresolvable="true" location="classpath*:/application.properties" />
		<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
			<!-- Tomcat JDBC连接池 -->
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />

			<!-- Connection Pooling Info -->
			<!-- 初始连接数 -->
			<property name="initialSize" value="${jdbc.pool.initialSize}" />
			<!-- 最小连接数 -->
			<property name="minIdle" value="${jdbc.pool.minIdle}" />
			<!-- 最大活动连接  跟maxIdle保持一致 -->
			<property name="maxActive" value="${jdbc.pool.maxActive}" />
			<!--最大连接数 -->
			<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
			<!-- 连接池最长等待时间  毫秒 -->
			<property name="maxWait" value="30000" />
			
			<!-- 是否默认提交 -->
			<property name="defaultAutoCommit" value="false" />

			<!-- 连接Idle半小时秒后超时  毫秒-->
			<property name="timeBetweenEvictionRunsMillis" value="${jdbc.pool.timeBetweenEvictionRunsMillis}" />
			<property name="minEvictableIdleTimeMillis" value="${jdbc.pool.minEvictableIdleTimeMillis}" />
			
			<!--启用jmx-->
			<property name="jmxEnabled" value="true" />
			
			<!-- 各种验证 会消耗一些性能 开发模式开启 -->
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="true" />
			<property name="testOnReturn" value="false" />
			
			<!-- 验证间隔 毫秒 -->
			<property name="validationInterval" value="${jdbc.pool.validationInterval}" />
			<property name="validationQuery" value="SELECT 1" />			
			
			<!-- 关闭长时间不使用的连接-->
			<property name="logAbandoned" value="false" />
			<property name="removeAbandoned" value="true" />
			
			<!--未关闭的连接超过 多少时间后删除 秒钟  -->
			<property name="removeAbandonedTimeout" value="60" />
			
			<!-- 当长时间不释放的连接达到总连接数的某个百分比时，启动removeAbandoned动作  0~100的数字-->
			<property name="abandonWhenPercentageFull" value="${jdbc.pool.abandonWhenPercentageFull}"/>
			
			<!-- jdbc拦截器 做拦截分析 -->
			<property name="jdbcInterceptors"
				value="org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;
				org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer" />
		</bean>
		<!-- 数据源配置,使用应用服务器的数据库连接池 -->
		<!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/ExampleDB" /> -->
	</beans>

	<!-- local development环境 -->
	<beans profile="development">
		<context:property-placeholder ignore-resource-not-found="true"
			location="classpath*:/application.development.properties,
          			  classpath*:/application.properties" />

		<!-- Tomcat JDBC连接池 -->
		<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
			<!-- Tomcat JDBC连接池 -->
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />

			<!-- Connection Pooling Info -->
			<!-- 初始连接数 -->
			<property name="initialSize" value="${jdbc.pool.initialSize}" />
			<!-- 最小连接数 -->
			<property name="minIdle" value="${jdbc.pool.minIdle}" />
			<!-- 最大活动连接  跟maxIdle保持一致 -->
			<property name="maxActive" value="${jdbc.pool.maxActive}" />
			<!--最大连接数 -->
			<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
			<!-- 连接池最长等待时间  毫秒 -->
			<property name="maxWait" value="30000" />
			
			<!-- 是否默认提交 -->
			<property name="defaultAutoCommit" value="false" />

			<!-- 连接Idle半小时秒后超时  毫秒-->
			<property name="timeBetweenEvictionRunsMillis" value="${jdbc.pool.timeBetweenEvictionRunsMillis}" />
			<property name="minEvictableIdleTimeMillis" value="${jdbc.pool.minEvictableIdleTimeMillis}" />
			
			<!--启用jmx-->
			<property name="jmxEnabled" value="true" />
			
			<!-- 各种验证 会消耗一些性能 开发模式开启 -->
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="true" />
			<property name="testOnReturn" value="false" />
			
			<!-- 验证间隔 毫秒 -->
			<property name="validationInterval" value="${jdbc.pool.validationInterval}" />
			<property name="validationQuery" value="SELECT 1" />			
			
			<!-- 关闭长时间不使用的连接-->
			<property name="logAbandoned" value="false" />
			<property name="removeAbandoned" value="true" />
			
			<!--未关闭的连接超过 多少时间后删除 秒钟  -->
			<property name="removeAbandonedTimeout" value="60" />
			
			<!-- 当长时间不释放的连接达到总连接数的某个百分比时，启动removeAbandoned动作  0~100的数字-->
			<property name="abandonWhenPercentageFull" value="${jdbc.pool.abandonWhenPercentageFull}"/>
			
			<!-- jdbc拦截器 做拦截分析 -->
			<property name="jdbcInterceptors"
				value="org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;
				org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer" />
				 
		</bean>
	</beans>
	
	<!-- unit test环境 -->
	<beans profile="test">
	 	<context:property-placeholder ignore-resource-not-found="true"
			location="classpath*:/application.properties,
          			  classpath*:/application.test.properties" />	
		
		<!-- Spring Simple连接池 -->
		<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
			<property name="driverClass" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
		</bean>

		<!-- 初始化数据表结构 与默认数据
		<jdbc:initialize-database data-source="dataSource" ignore-failures="ALL">
			<jdbc:script location="classpath:data/init.sql" />
			<jdbc:script location="classpath:data/init-test.sql" encoding="UTF-8"/>
		</jdbc:initialize-database>
		-->
	</beans>
</beans>
